Name: bigint
Expected files: bigint.hpp bigint.cpp

In computer science a bignum is an objext representing an arbitrary precision number, 
this is useful when you want to store a number bigger than SIZE_MAX without any loss
of precision. This is often achieved by storing an array on a string containing
the different "parts" of the number.

Create a class called bigint that will store an arbitrary precision unsigned integer.

Your class must support addition, comparison and "digitshift"(like bitshift but instead
of shifting the bits you will shift the digits in base 10, e.g.:
(42 << 3 == 42000) and (1337 >> 2 == 13)).

Your bigint must be printable with the << operator (in base 10) and the output should
not contain any leading zeros.

You will find a main in this directory that must work with your class.










#include <string>
#include <iostream>

class bigint {
	private:

	std::string num;

	public:
	bigint(size_t n) : num(std::to_string(n)) {}
	bigint() : num("0") {}
	bigint(const bigint& oth) : num(oth.num) {}

	bigint(const std::string& n) {
    	if (n.empty() || \
		!std::all_of(n.begin(), n.end(), ::isdigit) || \
		(n.size() > 1 && n[0] == '0')) { 
        	std::cout << "Invalid number string" << std::endl;
        	num = "0";
    	}
    	else
        	num = n;
	}

	friend std::ostream& operator<<(std::ostream& os, const bigint& b) {
    	return os << b.num;
	}

	std::string add_strings(const std::string& n1, const std::string& n2) const {
    	std::string result;
    	int carry = 0, i = n1.size() - 1, j = n2.size() - 1;
    	while (i >= 0 || j >= 0 || carry) {
        	int sum = (i >= 0 ? n1[i--] - '0' : 0) + (j >= 0 ? n2[j--] - '0' : 0) + carry;
        	result.push_back(sum % 10 + '0');
        	carry = sum / 10;
    	}
    	std::reverse(result.begin(), result.end());
    	return result;
	}

	bigint operator+(const bigint& oth) const {
    	return bigint(add_strings(num, oth.num));
	}

	bigint& operator+=(const bigint& oth) {
    	num = add_strings(num, oth.num);
    	return *this;
	}

	bigint& operator++() {
    	return *this += bigint(1);
	}

	bigint operator++(int) {
    	bigint tmp(*this);
    	++(*this);
    	return tmp;
	}

	bigint operator<<(size_t shift) const {
    	return bigint(num + std::string(shift, '0'));
	}

	bigint& operator<<=(size_t shift) {
    	num += std::string(shift, '0');
    	return *this;
	}

	bigint& operator>>=(const bigint& b) {
    	if (bigint(num.size()) <= b)
        	num = "0";
    	else {
        	bigint i(0);
        	while (i < b) {
            	num = num.substr(0, num.size() - 1);
            	++i;
        	}
    	}
    	return *this;
	}

	bool operator<(const bigint& oth) const {
	    if (num.size() < oth.num.size())
    	    return 1;
    	else if (num.size() > oth.num.size())
        	return 0;
    	return num < oth.num;
	}

	bool operator>(const bigint& oth) const {
    	return oth < *this;
	}

	bool operator<=(const bigint& oth) const {
    	return !(*this > oth);
	}

	bool operator>=(const bigint& oth) const {
    	return !(*this < oth);
	}

	bool operator==(const bigint& oth) const {
    	return num == oth.num;
	}

	bool operator!=(const bigint& oth) const {
    	return num != oth.num;
	}

	bigint operator-(const bigint& oth) const {
    	(void) oth;
    	return bigint();
	}
};